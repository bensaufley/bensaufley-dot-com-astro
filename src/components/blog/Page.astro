---
import { getCollection } from 'astro:content';
import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc';
import { Fragment, type ComponentType } from 'preact';
import type { AstroComponentFactory } from 'astro/runtime/server/index.js';

import { createMarkdownProcessor } from '@astrojs/markdown-remark';
import { VFile } from '../../../node_modules/unified/node_modules/vfile';
import { createMdxProcessor } from '../../../node_modules/@astrojs/mdx/dist/plugins.js';
import { ignoreStringPlugins, parseFrontmatter } from '../../../node_modules/@astrojs/mdx/dist/utils.js';
import { markdownConfigDefaults } from '@astrojs/markdown-remark';
import { setVfileFrontmatter } from '@astrojs/markdown-remark';

import Post from './Post';
import BaseLayout from '../../layouts/BaseLayout.astro';

import styles from './Page.module.css';

dayjs.extend(utc);
export interface Props {
  class?: string | undefined;
  page: number;
}

const { class: className, page } = Astro.props as Props;

export const PER_PAGE = 3;

const posts = await getCollection('posts');

const more = posts.length >= (page + 1) * PER_PAGE;

const mdxParser = createMdxProcessor(
  {
    extendMarkdownConfig: true,
    recmaPlugins: [],
    ...markdownConfigDefaults,
    remarkPlugins: ignoreStringPlugins(markdownConfigDefaults.remarkPlugins),
    rehypePlugins: ignoreStringPlugins(markdownConfigDefaults.rehypePlugins),
    remarkRehype: (markdownConfigDefaults.remarkRehype as any) ?? {},
    optimize: false,
  },
  { sourcemap: true, importMetaEnv: { SITE: 'bensaufley.com', ...import.meta.env } },
);

const parseMdx = async (source: string, id: string) => {
  const { data: frontmatter, content: pageContent } = parseFrontmatter(source, id);
  const vfile = new VFile({ value: pageContent, path: id });
  setVfileFrontmatter(vfile, frontmatter);
  return new Promise<VFile>((resolve) => {
    mdxParser.process(vfile, (_, f) => {
      resolve(f!);
    });
  });
};

const mdParser = await createMarkdownProcessor();

const parseMd = async (source: string, _id: string) => {
  return mdParser.render(source);
};

const renderedPosts = await Promise.all(
  posts
    .toSorted(({ data: { date: a } }, { data: { date: b } }) => dayjs(b).diff(a))
    .slice(page * PER_PAGE, (page + 1) * PER_PAGE)
    .map(async (post) => {
      const isMdx = post.id.endsWith('.mdx');
      let Content: AstroComponentFactory | ComponentType = () => null;
      let html: string | null = null;
      if (isMdx ? post.body.includes('{/* more */}') : post.body.includes('<!--more-->')) {
        const [teaser] = post.body.split(/(<!--more-->|\{\/\* ?more ?\*\/\})/);
        let value: Buffer | Uint8Array | string = '';
        if (isMdx) {
          const resp = await parseMdx(teaser!, post.id);
          console.log('resp mdx', resp);
          ({ value } = resp);
        } else {
          const resp = await parseMd(teaser!, post.id);
          console.log('resp md', resp);
          ({ code: value } = resp);
        }
        // Manually replace footnote links with links to anchors in the blog post itself
        html = value
          .toString()
          .replace(/\[\^(\d+)\]/g, (_, n) => `<sup><a href="/blog/${post.slug}#user-content-fn-${n}">${n}</a></sup>`);
      } else {
        ({ Content } = await post.render());
      }

      return {
        ...post,
        Content,
        html,
      };
    }),
);

const pages = Array.from({ length: Math.ceil(posts.length / PER_PAGE) - 2 }, (_, i) => i + 1);
---

<BaseLayout class={className} title={page === 0 ? 'Home' : 'Blog'}>
  {
    renderedPosts.map(({ data: { title, date }, html, Content, slug }) => (
      <Post title={title} titleElement="h2" posted={date} href={`/blog/${slug}`}>
        {html ? (
          <>
            <Fragment set:html={html} />
            <a class={styles.readMore} href={`/blog/${slug}`}>
              Read more&hellip;
            </a>
          </>
        ) : (
          <Content />
        )}
      </Post>
    ))
  }
  <div class={styles.pageNav}>
    {page > 0 && <a href={page === 1 ? '/' : `/blog/${page - 1}`}>&#9666; Previous</a>}
    {pages.map((n) => <a href={`/blog/${n}`}>{n}</a>)}
    {more && <a href={`/blog/${page + 1}`}>Next &#9656;</a>}
  </div>
</BaseLayout>
